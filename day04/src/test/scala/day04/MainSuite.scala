/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package day04

import java.time.LocalDateTime

import org.scalatest.{Matchers, WordSpec}
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class MainSuite extends WordSpec with Matchers {
  val input = """[1518-11-01 00:00] Guard #10 begins shift
                |[1518-11-01 00:05] falls asleep
                |[1518-11-01 00:25] wakes up
                |[1518-11-01 00:30] falls asleep
                |[1518-11-01 00:55] wakes up
                |[1518-11-01 23:58] Guard #99 begins shift
                |[1518-11-02 00:40] falls asleep
                |[1518-11-02 00:50] wakes up
                |[1518-11-03 00:05] Guard #10 begins shift
                |[1518-11-03 00:24] falls asleep
                |[1518-11-03 00:29] wakes up
                |[1518-11-04 00:02] Guard #99 begins shift
                |[1518-11-04 00:36] falls asleep
                |[1518-11-04 00:46] wakes up
                |[1518-11-05 00:03] Guard #99 begins shift
                |[1518-11-05 00:45] falls asleep
                |[1518-11-05 00:55] wakes up""".stripMargin.lines.toList

  "Records" should {
    "parse lines" in {
      Main.getEvents(input) should contain (Wake(LocalDateTime.of(1518,11,5,0,55)))
    }
  }

  "partition" should {
    "partition the records" in {
      val records = List(Shift(1, LocalDateTime.of(1518,11,5,0,0)),
        Sleep(LocalDateTime.of(1518,11,5,0,5)),
        Wake(LocalDateTime.of(1518,11,5,0,10)))
      val partitioned = Main.getGuardShifts(records)
      partitioned should be (List(GuardShift(1,List(
        Sleep(LocalDateTime.of(1518,11,5,0,5)), Wake(LocalDateTime.of(1518,11,5,0,10))))))
      println(Main.getGuardShifts(Main.getEvents(input)))
    }
  }

  "calculateSleeps" should {
    "calculate sleep time" in {
      val partitioned = Main.getGuardShifts(Main.getEvents(input))
      val sleepTimes = Main.calculateSleeps(partitioned)
      sleepTimes should be (List((99,10), (99,10), (10,5), (99,10), (10,45)))
    }
  }

  "totalSleeps" should {
    "calculate total sleep time" in {
      val sleepTimes: List[(Int,Long)] = List((99,10), (99,10), (10,5), (99,10), (10,45))
      val guardSleeps = Main.totalSleepsPerGuard(sleepTimes)
      guardSleeps should be (Map(99->30L, 10->50))
    }
  }

  "ans1" should {
    "work" in{
      Main.ans1(input) should be ((10, 24))
    }
  }

  "ans2" should {
    "work" in {
      Main.ans2(input) should be ((99, 45))
    }
  }
}
