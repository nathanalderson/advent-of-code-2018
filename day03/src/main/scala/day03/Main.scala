/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package day03

import scala.io.Source

case class Loc(x: Int, y: Int)
case class Size(x: Int, y: Int)
object Claim {
  def apply(id: Int, loc_x: Int, loc_y: Int, size_x: Int, size_y: Int): Claim =
    new Claim(id, Loc(loc_x, loc_y), Size(size_x ,size_y))
  val re_Claim = raw"#(\d+) @ (\d+),(\d+): (\d+)x(\d+)".r
  def apply(s: String): Claim = s match {
    case re_Claim(id, loc_y, loc_x, size_y, size_x) =>
      Claim(id.toInt, loc_x.toInt, loc_y.toInt, size_x.toInt ,size_y.toInt)
  }
}
case class Claim(id: Int, loc: Loc, size: Size) {
  def getLocs() = for (x <- loc.x to loc.x+size.x-1; y <- loc.y to loc.y+size.y-1) yield Loc(x,y)
}

object Main {
  def main(args: Array[String]): Unit = {
    val claims = Source.fromFile("input.txt").getLines.map(Claim.apply).toList
    val ans1 = overlaps(claims).size
    println(s"ans1 = $ans1")
    val ans2 = no_overlaps(claims).head.id
    println(s"ans2 = $ans2")
  }

  def overlaps(claims: Iterable[Claim]): Iterable[Loc] = {
    val locs = claims.flatMap(claim => claim.getLocs())
    val histogram = locs.groupBy(identity).mapValues(_.size)
    histogram.filter{ case (_,count) => count>1 }.keys
  }

  def no_overlaps(claims: Iterable[Claim]): Iterable[Claim] = {
    val locs = claims.flatMap(claim => claim.getLocs())
    val histogram = locs.groupBy(identity).mapValues(_.size)
    claims.filter(!_.getLocs.exists(histogram(_) > 1))
  }
}


