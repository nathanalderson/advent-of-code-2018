/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package day13

import scala.io.Source

case class Point(x:Int, y:Int)

sealed trait Track
object Track {
  def fromChar(c: Char): Option[Track] = {
    if (List('|', '-').contains(c)) Some(Straight)
    else if (List('/', '\\').contains(c)) Some(Curve)
    else if (c == '+') Some(Intersection)
    else None
  }
}
case object Straight extends Track
case object Curve extends Track
case object Intersection extends Track

object Main {
  type Board = Map[Point, Track]

  def main(args: Array[String]): Unit = {
    val input = Source.fromFile("input.txt").getLines
    val board = parseBoard(input)
  }

  def parseBoard(input: Iterator[String]): Board =
    input.zipWithIndex.flatMap {
      case (line, y) => line.zipWithIndex.map {
        case (c, x) => Point(x, y) -> Track.fromChar(c)
      }
    }.toMap.filter(_._2.isDefined).mapValues(_.get)

}
