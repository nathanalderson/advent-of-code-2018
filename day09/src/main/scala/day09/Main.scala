/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package day09

object Main {
  def main(args: Array[String]): Unit = {
    println(s"ans1 = ${Main.play(473, 70904)}")
    println(s"ans1 = ${Main.play(473, 70904*100)}")
  }

  def play(numPlayers: Int,
           lastMarble: Int,
           scores: Map[Int, Int] = Map(),
           currentPlayer: Int = 1,
           marbles: List[Int] = List(0),
           currentMarble: Int = 0,
           turn: Int = 1,
          )
    : Int =
  {
    if(turn%10000==0) println(s"turn $turn")
    if (turn == lastMarble)
      scores.values.max
    else {
      val nextPlayer = (currentPlayer % numPlayers) + 1
      val (newMarbles, nextCurrentMarble, pointsScored) = placeMarble(marbles, currentMarble, turn)
      val prevScore = scores.withDefaultValue(0)(currentPlayer)
      val newScores = scores.updated(currentPlayer, prevScore+pointsScored)
      play(numPlayers, lastMarble, newScores, nextPlayer, newMarbles, nextCurrentMarble, turn+1)
    }
  }

  // returns: new marbles, new current marble, points scored
  def placeMarble(marbles: List[Int], currentMarble: Int, marble: Int): (List[Int], Int, Int) = {
    if (marble % 23 == 0) {
      val removeAt = (currentMarble+(marbles.length-7)) % marbles.length
      val (before, removed::after) = marbles.splitAt(removeAt)
      val newMarbles = before ++ after
      (newMarbles, removeAt, removed+marble)
    } else {
      val insertAfter = (currentMarble + 1) % marbles.length
      val (before, after) = marbles.splitAt(insertAfter + 1)
      val newMarbles = before ++ (marble :: after)
      (newMarbles, insertAfter + 1, 0)
    }
  }
}
