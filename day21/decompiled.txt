register names:
    0  z            what's left in register z?
    1  y
    2  b
    3  ip
    4  x
    5  a

00: addi 3 16 3     ip = ip + 16 (GOTO 17)

01: seti 1 2 5      a = 1                       a = 1                for (a = 1; a <= x; a++) {
                                                                         for (b = 1; b <= x; b++) {
02: seti 1 3 2      b = 1                       b = 1                        if (a*b == x) {
                                                                                 z += a
03: mulr 5 2 1      y = a * b                   if x == (a * b):             }
04: eqrr 1 4 1      y = (y==x) ? 1 : 0              z = z + a            }
05: addr 1 3 3      ip = ip + y                 .                    }
06: addi 3 1 3      ip = ip + 1 (GOTO 8)        .
07: addr 5 0 0      z = z + a                   .

08: addi 2 1 2      b = b + 1                   b = b + 1
09: gtrr 2 4 1      y = (b > x) ? 1 : 0         if b > x:
10: addr 3 1 3      ip = ip + y                     a = a + 1
11: seti 2 5 3      ip = 2 (GOTO 3)             else:
12: addi 5 1 5      a = a + 1                       GOTO 3

13: gtrr 5 4 1      y = (a > x) ? 1 : 0         if a > x:
14: addr 1 3 3      ip = ip + y                     EXIT
15: seti 1 2 3      ip = 1 (GOTO 2)             else:
16: mulr 3 3 3      ip = 16*16 (EXIT)               GOTO 2

# The following just initializes x to 989 (for part 1) or 10551389 (for part 2)
# and z = 0, then jumps to 1
17: addi 4 2 4      x = x + 2                   x = 209*(x + 2)^2  = 836
18: mulr 4 4 4      x = x * x                   .
19: mulr 3 4 4      x = x * 19                  .
20: muli 4 11 4     x = x * 11                  .
21: addi 1 6 1      y = y + 6                   y = (22 * (y + 6)) + 21 = 153
22: mulr 1 3 1      y = y * 22                  .
23: addi 1 21 1     y = y + 21                  .
24: addr 4 1 4      x = x + y                   x = x + y = 989
25: addr 3 0 3      ip = ip + z                 JUMP z  # 1 for part 2
26: seti 0 3 3      ip = 0 (GOTO 1)             GOTO 1
27: setr 3 4 1      y = 27                      y = 10550400
28: mulr 1 3 1      y = y * 28                  .
29: addr 3 1 1      y = y + 29                  .
30: mulr 3 1 1      y = y * 30                  .
31: muli 1 14 1     y = y * 14                  .
32: mulr 1 3 1      y = y * 32                  .
33: addr 4 1 4      x = x + y                   x = x + y = 10551389
34: seti 0 3 0      z = 0                       z = 0
35: seti 0 7 3      ip = 0 (GOTO 1)             GOTO 1

