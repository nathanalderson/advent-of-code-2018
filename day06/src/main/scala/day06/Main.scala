/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package day06

import scala.io.Source

object Main {
  def main(args: Array[String]): Unit = {
    val lines = Source.fromFile("input.txt").getLines.toList
    println(s"ans1 = ${ans1(lines)}")
  }

  def ans1(lines: List[String]): String = {
    val re_Line = raw"Step (.) must be finished before step (.) can begin.".r
    val input = lines.map { case re_Line(prereq, step) => (prereq, step) }
    val steps = (input.map(_._1) ++ input.map(_._2)).distinct
    val requires = input.groupBy(_._2).mapValues(_.map(_._1))
    val roots = steps.filterNot(requires.contains).sorted
    val requiresWithRoots = requires ++ roots.map(_->List())
    sequence(requiresWithRoots, List(), roots).reverse.mkString
  }

  def sequence(requires: Map[String, List[String]], completed: List[String], available: List[String]): List[String] = {
//    println(s"*** sequence2(..., ${completed.reverse.mkString}, ${available.mkString})")
    available match {
      case List() => completed
      case nextStep::rest =>
        val newCompleted = nextStep::completed
        val newAvailable = requires
          .filter(_._2.forall(s => newCompleted.contains(s)))
          .keys
          .filterNot(newCompleted.contains)
          .toSet
          .toList
          .sorted
        sequence(requires, newCompleted, newAvailable)
    }
  }

}
