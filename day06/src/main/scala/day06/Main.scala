/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package day06

import scala.io.Source

object Point {
  def apply(a: Array[Int]): Point = new Point(a(0), a(1))
}
case class Point(x: Int, y: Int)

object Main {
  def main(args: Array[String]): Unit = {
    val points = Source.fromFile("input.txt")
      .getLines
      .map(_.split(", ").map(_.toInt))
      .map(Point.apply)
      .toList
    val ans1 = regions(points).map(_._2.length).max
    println(s"ans1 = $ans1")
    val ans2 = totalDistances(points).count(_._2 < 10000)
    println(s"ans2 = $ans2")
  }

  def pointsInBounds(points: Seq[Point]): Seq[Point] =
    for {
      x <- points.map(_.x).min to points.map(_.x).max
      y <- points.map(_.y).min to points.map(_.y).max
    } yield Point(x,y)

  def nearest(point: Point, points: Seq[Point]): Option[Point] =
    points
      .map(p => p -> distance(p, point))
      .groupBy(_._2)
      .minBy(_._1)
    match {
      case (_,List((p,_))) => Some(p)
      case _ => None
    }

  def distance(p1: Point, p2: Point): Int =
    Math.abs(p1.x - p2.x) + Math.abs(p1.y - p2.y)

  // returns a map of each point in points to the points in its region
  def regions(points: Seq[Point]): Map[Point, Seq[Point]] =
    pointsInBounds(points)
      .map(p => p->nearest(p, points))
      .filter(_._2.isDefined)
      .map(t=>t._1->t._2.get)
      .groupBy(_._2)
      .mapValues(_.map(_._2))

  // returns a map of each point in points to its total distance
  def totalDistances(points: Seq[Point]): Map[Point, Int] =
    pointsInBounds(points).map(p=>p->points.map(distance(p,_)).sum).toMap
}
